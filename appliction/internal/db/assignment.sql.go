// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: assignment.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO LMS_USER (
    lms_user_email,
    password,
    lms_role_id,
    tenant_id,
    address,
    phone_number,
    registration_date
) VALUES (
             $1, $2, $3, $4, $5, $6, $7
         ) RETURNING lms_user_id, lms_user_email, password, lms_role_id, tenant_id, address, phone_number, registration_date, created_at, updated_at
`

type CreateUserParams struct {
	LmsUserEmail     string         `json:"lms_user_email"`
	Password         string         `json:"password"`
	LmsRoleID        uuid.UUID      `json:"lms_role_id"`
	TenantID         uuid.NullUUID  `json:"tenant_id"`
	Address          sql.NullString `json:"address"`
	PhoneNumber      sql.NullString `json:"phone_number"`
	RegistrationDate sql.NullTime   `json:"registration_date"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (LmsUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.LmsUserEmail,
		arg.Password,
		arg.LmsRoleID,
		arg.TenantID,
		arg.Address,
		arg.PhoneNumber,
		arg.RegistrationDate,
	)
	var i LmsUser
	err := row.Scan(
		&i.LmsUserID,
		&i.LmsUserEmail,
		&i.Password,
		&i.LmsRoleID,
		&i.TenantID,
		&i.Address,
		&i.PhoneNumber,
		&i.RegistrationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM LMS_USER
WHERE lms_user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, lmsUserID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, lmsUserID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT lms_user_id, lms_user_email, password, lms_role_id, tenant_id, address, phone_number, registration_date, created_at, updated_at FROM LMS_USER
WHERE lms_user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, lmsUserID uuid.UUID) (LmsUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, lmsUserID)
	var i LmsUser
	err := row.Scan(
		&i.LmsUserID,
		&i.LmsUserEmail,
		&i.Password,
		&i.LmsRoleID,
		&i.TenantID,
		&i.Address,
		&i.PhoneNumber,
		&i.RegistrationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT lms_user_id, lms_user_email, password, lms_role_id, tenant_id, address, phone_number, registration_date, created_at, updated_at FROM LMS_USER
WHERE lms_user_email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, lmsUserEmail string) (LmsUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, lmsUserEmail)
	var i LmsUser
	err := row.Scan(
		&i.LmsUserID,
		&i.LmsUserEmail,
		&i.Password,
		&i.LmsRoleID,
		&i.TenantID,
		&i.Address,
		&i.PhoneNumber,
		&i.RegistrationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsersByRole = `-- name: GetUsersByRole :many
SELECT lms_user_id, lms_user_email, password, lms_role_id, tenant_id, address, phone_number, registration_date, created_at, updated_at FROM LMS_USER
WHERE lms_role_id = $1
ORDER BY lms_user_email
`

func (q *Queries) GetUsersByRole(ctx context.Context, lmsRoleID uuid.UUID) ([]LmsUser, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByRole, lmsRoleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LmsUser{}
	for rows.Next() {
		var i LmsUser
		if err := rows.Scan(
			&i.LmsUserID,
			&i.LmsUserEmail,
			&i.Password,
			&i.LmsRoleID,
			&i.TenantID,
			&i.Address,
			&i.PhoneNumber,
			&i.RegistrationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByTenant = `-- name: GetUsersByTenant :many
SELECT lms_user_id, lms_user_email, password, lms_role_id, tenant_id, address, phone_number, registration_date, created_at, updated_at FROM LMS_USER
WHERE tenant_id = $1
ORDER BY lms_user_email
`

func (q *Queries) GetUsersByTenant(ctx context.Context, tenantID uuid.NullUUID) ([]LmsUser, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LmsUser{}
	for rows.Next() {
		var i LmsUser
		if err := rows.Scan(
			&i.LmsUserID,
			&i.LmsUserEmail,
			&i.Password,
			&i.LmsRoleID,
			&i.TenantID,
			&i.Address,
			&i.PhoneNumber,
			&i.RegistrationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT lms_user_id, lms_user_email, password, lms_role_id, tenant_id, address, phone_number, registration_date, created_at, updated_at FROM LMS_USER
ORDER BY lms_user_email
    LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]LmsUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LmsUser{}
	for rows.Next() {
		var i LmsUser
		if err := rows.Scan(
			&i.LmsUserID,
			&i.LmsUserEmail,
			&i.Password,
			&i.LmsRoleID,
			&i.TenantID,
			&i.Address,
			&i.PhoneNumber,
			&i.RegistrationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE LMS_USER
SET
    lms_user_email = COALESCE($2, lms_user_email),
    password = COALESCE($3, password),
    lms_role_id = COALESCE($4, lms_role_id),
    tenant_id = COALESCE($5, tenant_id),
    address = COALESCE($6, address),
    phone_number = COALESCE($7, phone_number),
    updated_at = CURRENT_TIMESTAMP
WHERE lms_user_id = $1
    RETURNING lms_user_id, lms_user_email, password, lms_role_id, tenant_id, address, phone_number, registration_date, created_at, updated_at
`

type UpdateUserParams struct {
	LmsUserID    uuid.UUID      `json:"lms_user_id"`
	LmsUserEmail string         `json:"lms_user_email"`
	Password     string         `json:"password"`
	LmsRoleID    uuid.UUID      `json:"lms_role_id"`
	TenantID     uuid.NullUUID  `json:"tenant_id"`
	Address      sql.NullString `json:"address"`
	PhoneNumber  sql.NullString `json:"phone_number"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (LmsUser, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.LmsUserID,
		arg.LmsUserEmail,
		arg.Password,
		arg.LmsRoleID,
		arg.TenantID,
		arg.Address,
		arg.PhoneNumber,
	)
	var i LmsUser
	err := row.Scan(
		&i.LmsUserID,
		&i.LmsUserEmail,
		&i.Password,
		&i.LmsRoleID,
		&i.TenantID,
		&i.Address,
		&i.PhoneNumber,
		&i.RegistrationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE LMS_USER
SET password = $2, updated_at = CURRENT_TIMESTAMP
WHERE lms_user_id = $1
`

type UpdateUserPasswordParams struct {
	LmsUserID uuid.UUID `json:"lms_user_id"`
	Password  string    `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.LmsUserID, arg.Password)
	return err
}
