// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type CourseStatus string

const (
	CourseStatusPending     CourseStatus = "Pending"
	CourseStatusPublished   CourseStatus = "Published"
	CourseStatusUnpublished CourseStatus = "Unpublished"
	CourseStatusArchived    CourseStatus = "Archived"
)

func (e *CourseStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CourseStatus(s)
	case string:
		*e = CourseStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CourseStatus: %T", src)
	}
	return nil
}

type NullCourseStatus struct {
	CourseStatus CourseStatus `json:"course_status"`
	Valid        bool         `json:"valid"` // Valid is true if CourseStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCourseStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CourseStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CourseStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCourseStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CourseStatus), nil
}

type EnrollmentType string

const (
	EnrollmentTypeENROLLED  EnrollmentType = "ENROLLED"
	EnrollmentTypeCOMPLETED EnrollmentType = "COMPLETED"
	EnrollmentTypeDROPPED   EnrollmentType = "DROPPED"
)

func (e *EnrollmentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnrollmentType(s)
	case string:
		*e = EnrollmentType(s)
	default:
		return fmt.Errorf("unsupported scan type for EnrollmentType: %T", src)
	}
	return nil
}

type NullEnrollmentType struct {
	EnrollmentType EnrollmentType `json:"enrollment_type"`
	Valid          bool           `json:"valid"` // Valid is true if EnrollmentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnrollmentType) Scan(value interface{}) error {
	if value == nil {
		ns.EnrollmentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnrollmentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnrollmentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EnrollmentType), nil
}

type LmsRoleType string

const (
	LmsRoleTypeLMSADMIN   LmsRoleType = "LMS_ADMIN"
	LmsRoleTypeSTUDENT    LmsRoleType = "STUDENT"
	LmsRoleTypeINSTRUCTOR LmsRoleType = "INSTRUCTOR"
)

func (e *LmsRoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LmsRoleType(s)
	case string:
		*e = LmsRoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for LmsRoleType: %T", src)
	}
	return nil
}

type NullLmsRoleType struct {
	LmsRoleType LmsRoleType `json:"lms_role_type"`
	Valid       bool        `json:"valid"` // Valid is true if LmsRoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLmsRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.LmsRoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LmsRoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLmsRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LmsRoleType), nil
}

type MaterialType string

const (
	MaterialTypeVideo MaterialType = "Video"
	MaterialTypePDF   MaterialType = "PDF"
	MaterialTypeSlide MaterialType = "Slide"
	MaterialTypeLink  MaterialType = "Link"
)

func (e *MaterialType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MaterialType(s)
	case string:
		*e = MaterialType(s)
	default:
		return fmt.Errorf("unsupported scan type for MaterialType: %T", src)
	}
	return nil
}

type NullMaterialType struct {
	MaterialType MaterialType `json:"material_type"`
	Valid        bool         `json:"valid"` // Valid is true if MaterialType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMaterialType) Scan(value interface{}) error {
	if value == nil {
		ns.MaterialType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MaterialType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMaterialType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MaterialType), nil
}

type SystemType string

const (
	SystemTypeLMS SystemType = "LMS"
	SystemTypeEMS SystemType = "EMS"
)

func (e *SystemType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SystemType(s)
	case string:
		*e = SystemType(s)
	default:
		return fmt.Errorf("unsupported scan type for SystemType: %T", src)
	}
	return nil
}

type NullSystemType struct {
	SystemType SystemType `json:"system_type"`
	Valid      bool       `json:"valid"` // Valid is true if SystemType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSystemType) Scan(value interface{}) error {
	if value == nil {
		ns.SystemType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SystemType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSystemType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SystemType), nil
}

type Assignment struct {
	AssignmentID uuid.UUID      `json:"assignment_id"`
	CourseID     uuid.UUID      `json:"course_id"`
	Title        string         `json:"title"`
	Instructions sql.NullString `json:"instructions"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
}

type Certificate struct {
	CertificateID  uuid.UUID      `json:"certificate_id"`
	EnrollmentID   uuid.UUID      `json:"enrollment_id"`
	IssueDate      sql.NullTime   `json:"issue_date"`
	CertificateUrl sql.NullString `json:"certificate_url"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
}

type Course struct {
	CourseID         uuid.UUID        `json:"course_id"`
	CourseTitle      string           `json:"course_title"`
	Description      sql.NullString   `json:"description"`
	InstructorID     uuid.UUID        `json:"instructor_id"`
	OverallRating    sql.NullInt32    `json:"overall_rating"`
	CourseCategory   uuid.UUID        `json:"course_category"`
	Status           NullCourseStatus `json:"status"`
	DurationDayCount sql.NullInt32    `json:"duration_day_count"`
	CreatedAt        sql.NullTime     `json:"created_at"`
	UpdatedAt        sql.NullTime     `json:"updated_at"`
	OwnedBy          uuid.UUID        `json:"owned_by"`
}

type CourseCategory struct {
	CategoryID   uuid.UUID      `json:"category_id"`
	CategoryName string         `json:"category_name"`
	Description  sql.NullString `json:"description"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
}

type Enrollment struct {
	EnrollmentID   uuid.UUID      `json:"enrollment_id"`
	StudentID      uuid.UUID      `json:"student_id"`
	CourseID       uuid.UUID      `json:"course_id"`
	EnrollmentDate sql.NullTime   `json:"enrollment_date"`
	Progress       sql.NullString `json:"progress"`
	Status         EnrollmentType `json:"status"`
	DueDate        sql.NullTime   `json:"due_date"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
}

type Lesson struct {
	LessonID     uuid.UUID        `json:"lesson_id"`
	Title        string           `json:"title"`
	Content      sql.NullString   `json:"content"`
	MaterialType NullMaterialType `json:"material_type"`
	ModuleID     uuid.UUID        `json:"module_id"`
	CreatedAt    sql.NullTime     `json:"created_at"`
	UpdatedAt    sql.NullTime     `json:"updated_at"`
}

type LmsUser struct {
	LmsUserID        uuid.UUID      `json:"lms_user_id"`
	LmsUserEmail     string         `json:"lms_user_email"`
	Password         string         `json:"password"`
	LmsRoleID        uuid.UUID      `json:"lms_role_id"`
	TenantID         uuid.NullUUID  `json:"tenant_id"`
	Address          sql.NullString `json:"address"`
	PhoneNumber      sql.NullString `json:"phone_number"`
	RegistrationDate sql.NullTime   `json:"registration_date"`
	CreatedAt        sql.NullTime   `json:"created_at"`
	UpdatedAt        sql.NullTime   `json:"updated_at"`
}

type LmsUserRole struct {
	LmsRoleID   uuid.UUID   `json:"lms_role_id"`
	LmsRoleName LmsRoleType `json:"lms_role_name"`
}

type Module struct {
	ModuleID    uuid.UUID      `json:"module_id"`
	ModuleName  string         `json:"module_name"`
	CourseID    uuid.UUID      `json:"course_id"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

type NamespaceConsumer struct {
	ConsumerID uuid.UUID    `json:"consumer_id"`
	LmsUserID  uuid.UUID    `json:"lms_user_id"`
	Namespace  string       `json:"namespace"`
	JoinedDate sql.NullTime `json:"joined_date"`
	IsActive   sql.NullBool `json:"is_active"`
}

type Quiz struct {
	QuizID    uuid.UUID    `json:"quiz_id"`
	Question  string       `json:"question"`
	Answer    string       `json:"answer"`
	ModuleID  uuid.UUID    `json:"module_id"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

type Rating struct {
	RatingID    uuid.UUID     `json:"rating_id"`
	UserID      uuid.UUID     `json:"user_id"`
	CourseID    uuid.UUID     `json:"course_id"`
	RatingCount sql.NullInt32 `json:"rating_count"`
	CreatedAt   sql.NullTime  `json:"created_at"`
	UpdatedAt   sql.NullTime  `json:"updated_at"`
}

type Report struct {
	ReportID          uuid.UUID      `json:"report_id"`
	ReportName        string         `json:"report_name"`
	GeneratedByUserID uuid.UUID      `json:"generated_by_user_id"`
	GeneratedDate     sql.NullTime   `json:"generated_date"`
	DataSnapshot      sql.NullString `json:"data_snapshot"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
}

type Review struct {
	ReviewID    uuid.UUID      `json:"review_id"`
	CourseID    uuid.UUID      `json:"course_id"`
	UserID      uuid.UUID      `json:"user_id"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

type StudentQuiz struct {
	StudentQuizID uuid.UUID     `json:"student_quiz_id"`
	StudentID     uuid.UUID     `json:"student_id"`
	QuizID        uuid.UUID     `json:"quiz_id"`
	Score         sql.NullInt32 `json:"score"`
	Attempt       sql.NullInt32 `json:"attempt"`
	CreatedAt     sql.NullTime  `json:"created_at"`
	UpdatedAt     sql.NullTime  `json:"updated_at"`
}

type Submission struct {
	SubmissionID uuid.UUID      `json:"submission_id"`
	AssignmentID uuid.UUID      `json:"assignment_id"`
	StudentID    uuid.UUID      `json:"student_id"`
	SubmittedAt  sql.NullTime   `json:"submitted_at"`
	FileUrl      sql.NullString `json:"file_url"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
}

type Tenant struct {
	TenantID   uuid.UUID    `json:"tenant_id"`
	Namespace  string       `json:"namespace"`
	CmsOwnerID uuid.UUID    `json:"cms_owner_id"`
	CreatedAt  sql.NullTime `json:"created_at"`
	IsActive   sql.NullBool `json:"is_active"`
}

type TenantsMember struct {
	TmID       uuid.UUID    `json:"tm_id"`
	LmsUserID  uuid.UUID    `json:"lms_user_id"`
	TenantID   uuid.UUID    `json:"tenant_id"`
	JoinedDate sql.NullTime `json:"joined_date"`
	IsActive   sql.NullBool `json:"is_active"`
}
