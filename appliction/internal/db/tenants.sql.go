// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tenants.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createNewTenant = `-- name: CreateNewTenant :one
INSERT INTO tenants (namespace, cms_owner_id)
VALUES ($1, $2)
RETURNING tenant_id, namespace, cms_owner_id, created_at, is_active
`

type CreateNewTenantParams struct {
	Namespace  string    `json:"namespace"`
	CmsOwnerID uuid.UUID `json:"cms_owner_id"`
}

func (q *Queries) CreateNewTenant(ctx context.Context, arg CreateNewTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createNewTenant, arg.Namespace, arg.CmsOwnerID)
	var i Tenant
	err := row.Scan(
		&i.TenantID,
		&i.Namespace,
		&i.CmsOwnerID,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT tenant_id, namespace, cms_owner_id, created_at, is_active
FROM Tenants
WHERE tenant_id = $1 AND is_active = TRUE
`

func (q *Queries) GetTenantByID(ctx context.Context, tenantID uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByID, tenantID)
	var i Tenant
	err := row.Scan(
		&i.TenantID,
		&i.Namespace,
		&i.CmsOwnerID,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getTenantByNamespace = `-- name: GetTenantByNamespace :one
SELECT  tenant_id, namespace, cms_owner_id, created_at, is_active FROM tenants
WHERE  namespace = $1 AND  is_active = true
`

func (q *Queries) GetTenantByNamespace(ctx context.Context, namespace string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByNamespace, namespace)
	var i Tenant
	err := row.Scan(
		&i.TenantID,
		&i.Namespace,
		&i.CmsOwnerID,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}
