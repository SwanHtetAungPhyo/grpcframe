// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course.sql

package db

import (
	"context"
)

const createNewCourse = `-- name: CreateNewCourse :one
INSERT  INTO course (course_title)
VALUES  ($1)
RETURNING  course_id, course_title, description, instructor_id, overall_rating, course_category, status, duration_day_count, created_at, updated_at, owned_by
`

func (q *Queries) CreateNewCourse(ctx context.Context, courseTitle string) (Course, error) {
	row := q.db.QueryRowContext(ctx, createNewCourse, courseTitle)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.CourseTitle,
		&i.Description,
		&i.InstructorID,
		&i.OverallRating,
		&i.CourseCategory,
		&i.Status,
		&i.DurationDayCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnedBy,
	)
	return i, err
}

const getAllCourse = `-- name: GetAllCourse :many
SELECT course_id, course_title, description, instructor_id, overall_rating, course_category, status, duration_day_count, created_at, updated_at, owned_by FROM  course
`

func (q *Queries) GetAllCourse(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getAllCourse)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.CourseID,
			&i.CourseTitle,
			&i.Description,
			&i.InstructorID,
			&i.OverallRating,
			&i.CourseCategory,
			&i.Status,
			&i.DurationDayCount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
